"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
"""

b = list(input('Введите число: '))


def charact_number(num, e, o):
    even_num, odd_num = e, o
    """Рекурсия"""
    # Базовый случай
    # последний шаг рекурсии
    if len(num) <= 0:
        return f'Количество четных и нечетных цифр в числе равно: ({even_num}, {odd_num})'
    else:
        # шаг рекурсии
        # рекурсивное условие если чётное число
        if int(num[0]) % 2 == 0:
            even_num += 1
            return charact_number(num[1:], even_num, odd_num)
        # шаг рекурсии
        # рекурсивное условие если нечётное число
        else:
            odd_num += 1
            return charact_number(num[1:], even_num, odd_num)


print(charact_number(b, 0, 0))
