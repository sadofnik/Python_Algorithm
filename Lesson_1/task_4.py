"""
Задание 4.

Для этой задачи:
1) придумайте 1-3 решения (желательно хотя бы два)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.


Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
"""

# Имитация БД, сопоставление имени и пароля, сопастовдение имени и статуса аутентификации
acc_dict = {'alex': 'pa$$', 'Qwe': 'qwerty', 'John Doe': 'Brode2ta'}
auth_dict = {'alex': False, 'Qwe': True, 'John Doe': False}


def auth_web(acc_dict, auth_dict):
    """
Сопастовление введённых данных с данными в словаре(БД), проверка валидности данных и вывод информации при
прохождении\непрохождении проверки.
    """
    input_login = input('Введите логин: ').lower()
    input_password = input('Введите пароль: ')
    check_login = acc_dict.get(input_login, 'Invalid login')
    check_auth = auth_dict.get(input_login)
    if check_login == input_password:
        print('Добро пожаловать на сайт')
        if not check_auth:
            print('Вы не активировали свою учётную запись')
            input_auth = input("""Пройти аутентификацию (y/n): """)
            if input_auth == 'y':
                print('Отправлено письмо на Ваш email')
                print('Пока не пройдёте аутентификацию действия на сайте ограничены')
            else:
                print('Пока не пройдёте аутентификацию действия на сайте ограничены')
    else:
        print('Неправильно указан логин\пароль')
        auth_web(acc_dict, auth_dict)


auth_web(acc_dict, auth_dict)

acc_dict = {'alex': ['pa$$', False], 'qwerty': ['qwerty, True'], 'John Doe': ['Brode2ta', False]}


def check_acaunt(user_dict):
    input_login = input('Введите логин: ')
    input_password = input('Введите пароль: ')
    check_username = user_dict.get(input_login, 'login not found')
    if check_username[0] == input_password and check_username[1] == True:
        print('Добро пожаловать на сайт!')
    elif check_username[0] == input_password and check_username[1] == False:
        print('Вы не активировали свою учётную запись')
        input_auth = input("""Пройти аутентификацию (y/n): """)
        if input_auth == 'y':
            print('Отправлено письмо на Ваш email')
        else:
            print('Пока не пройдёте аутентификацию действия на сайте ограничены')
    else:
        print('Неправильно указан логин\пароль')
        check_acaunt(acc_dict)


check_acaunt(acc_dict)

"""
Функции имеют одинаковую сложность О(n), так как имеют рекурсию при вводе 
неправильного логина\пароля без увеличения данных, т.е. остаётся линейной(если я правильно понял). 
Вторая функция имеет чуть более упрощенный и более читаемый вид, 
так как идёт одновременная проверка на правильность 
введённых данных и проверки аутентификации. 
"""
