"""
Задание 2.

Приведен код, который формирует из введенного числа
обратное по порядку входящих в него цифр.
Задача решена через рекурсию

Сделайте замеры времени выполнения кода с помощью модуля timeit

Попробуйте оптимизировать код, чтобы снизить время выполнения
Проведите повторные замеры

Подсказка: примените мемоизацию

Добавьте аналитику: что вы сделали и почему
"""
from timeit import timeit


def memorize(func):
    def g(n,memory={}):
        r = memory.get(n)
        if r is None:
            r = func(n)
            memory[n] =r
        return r
    return g


@memorize
def recursive_reverse(number):
    if number == 0:
        return str()
    return f'{str(number % 10)}{recursive_reverse(number // 10)}'


print(timeit("recursive_reverse(1234531)","from __main__ import recursive_reverse"))
print(recursive_reverse(1234531)) ## для проверки корректности работы кода
"""
без мемоизации 5.1673635
с мемоизацией 0.3065739

Убрал из кода лишнюю часть при условии number == 0, чтобы не добавлялся 0 в строку. Добавил метод memorize 
для сохранения промежуточных значений. В итоге рекурсия высчитывает быстрее за счёт сохранения промежуточных значений.  
"""